// <auto-generated />
using System;
using LiftDataManager.Core.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiftDataManager.Core.Migrations
{
    [DbContext(typeof(ParameterContext))]
    [Migration("20250218112552_Add_SafetyBrakeName")]
    partial class Add_SafetyBrakeName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BuildingTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.CENumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CENumbers", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.CargoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CargoTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortMark")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countrys", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.ElevatorStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ElevatorStandards", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.GoodsLiftStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GoodsLiftStandards", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.InstallationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InstallationInfos", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.LiftPlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetNumber")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("ZipCodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("LiftPlanners", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.LiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CargoTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DriveTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CargoTypeId");

                    b.HasIndex("DriveTypeId");

                    b.ToTable("LiftTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.LoadingDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LoadingDevices", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.VandalResistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("VandalResistants", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("ZipCodeNumber")
                        .HasMaxLength(10)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("ZipCodes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.ControlCabinetPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ControlCabinetPositions", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.ControlCabinetSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ControlCabinetSizes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.ControlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ControlTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveBrakeDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DriveBrakeDesigns", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriveControlTyp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DriveSystemTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DriveSystemTypeId");

                    b.ToTable("DriveSystems", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystemPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DriveSystemPositions", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystemRopeDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DriveSystemRopeDirections", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DriveSystemTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.ElectricalNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ElectricalNetworks", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.EmergencyCallButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EmergencyCallButtons", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.EmergencyConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EmergencyConnections", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.EmergencyDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EmergencyDevices", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.EmergencyHotline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EmergencyHotlines", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.HydraulicValve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("HydraulicValves", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.LiftControlManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeadTime")
                        .HasMaxLength(3)
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeadTimeSIL3")
                        .HasMaxLength(3)
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeadTimeZAsbc4")
                        .HasMaxLength(3)
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetectionDistance")
                        .HasMaxLength(3)
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetectionDistanceSIL3")
                        .HasMaxLength(3)
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Speeddetector")
                        .HasColumnType("REAL");

                    b.Property<double>("SpeeddetectorSIL3")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("LiftControlManufacturers", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.LiftInverterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxFuseSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LiftInverterTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.PowerSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PowerSupplys", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.ZiehlAbeggDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SafetyBrakeName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("ZiehlAbeggDrives", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.DatabaseTableValueModification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NewEntityValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DatabaseTableValueModifications", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.DriveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DriveTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.DropdownValue", b =>
                {
                    b.Property<string>("Base")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("DropdownValues", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.BufferPropProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AreaOfProfile")
                        .HasColumnType("REAL");

                    b.Property<double>("CenterOfGravityAxisX")
                        .HasColumnType("REAL");

                    b.Property<double>("CenterOfGravityAxisY")
                        .HasColumnType("REAL");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MomentOfInertiaX")
                        .HasColumnType("REAL");

                    b.Property<double>("MomentOfInertiaY")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RadiusOfInertiaX")
                        .HasColumnType("REAL");

                    b.Property<double>("RadiusOfInertiaY")
                        .HasColumnType("REAL");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BufferPropProfiles", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.CarFrameBaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarFrameBaseTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.CarFramePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarFramePositions", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.CarFrameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CFPStartIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarFrameBaseTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarFrameDGB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarFrameDGBOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarFrameWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarFrametoCWTDGBOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterweightDGB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterweightDGBOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterweightFillingDepth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterweightFillingWidth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DriveTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasMachineRoom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCFPControlled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarFrameBaseTypeId");

                    b.HasIndex("DriveTypeId");

                    b.ToTable("CarFrameTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.Coating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Coatings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideModelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("GuideTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuideTypeId");

                    b.ToTable("GuideModelTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideRailLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RailLength")
                        .HasColumnType("REAL");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GuideRailLengths", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideRails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("FlangeC")
                        .HasColumnType("REAL");

                    b.Property<string>("ForgedClips")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ForgedClipsForce")
                        .HasColumnType("REAL");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Machined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ModulusOfResistanceX")
                        .HasColumnType("REAL");

                    b.Property<double>("ModulusOfResistanceY")
                        .HasColumnType("REAL");

                    b.Property<double>("MomentOfInertiaX")
                        .HasColumnType("REAL");

                    b.Property<double>("MomentOfInertiaY")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RadiusOfInertiaX")
                        .HasColumnType("REAL");

                    b.Property<double>("RadiusOfInertiaY")
                        .HasColumnType("REAL");

                    b.Property<double>("RailHead")
                        .HasColumnType("REAL");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SlidingClips")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("SlidingClipsForce")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessF")
                        .HasColumnType("REAL");

                    b.Property<bool>("UsageAsCarRail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsageAsCwtRail")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("GuideRailss", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideRailsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GuideRailsStatuss", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GuideTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.HydraulicLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("HydraulicLocks", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.LiftBuffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BufferStroke")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Diameter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxLoad063")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad100")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad130")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad160")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad180")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad200")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoad250")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad063")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad100")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad130")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad160")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad180")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad200")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoad250")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("LiftBuffers", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.LiftPositionSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("LiftPositionSystems", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.LoadWeighingDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LoadWeighingDevices", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.OverspeedGovernor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("OverspeedGovernors", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.OverspeedGovernorWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OverspeedGovernorWeights", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.ReducedProtectionSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ReducedProtectionSpaces", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.SafetyGearModelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowableWidth")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoadDryColddrawn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoadDryMachined")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoadOiledColddrawn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoadOiledMachined")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoadDryColddrawn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoadDryMachined")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoadOiledColddrawn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinLoadOiledMachined")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SafetyGearTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyGearTypeId");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("SafetyGearModelTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.SafetyGearType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SafetyGearTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.WireRopeGrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WireRopeGrips", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.AntiDrum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AntiDrums", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarCoverGlassPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarCoverGlassPanels", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarCoverPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightPerSquareMeter")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CarCoverPanels", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFloorColorTyp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarFloorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarFloorId");

                    b.ToTable("CarFloorColorTyps", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFloorProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightPerMeter")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CarFloorProfiles", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFloorSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarFloorSheets", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFloorSurface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarFloorSurfaces", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFloorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarFloorTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFlooring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpecialSheet")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Thickness")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightPerSquareMeter")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CarFloorings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarLighting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarLightings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.DivisionBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Thickness")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightPerMeter")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("DivisionBars", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.Handrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Diameter")
                        .HasColumnType("REAL");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightPerMeter")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Handrails", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.LiftCarRoof", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftCarRoofs", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.LiftCarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftCarTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.MaterialThickness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MaterialThicknesss", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.Mirror", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightPerSquareMeter")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Mirrors", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.MirrorStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MirrorStyles", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.ProtectiveRailing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProtectiveRailings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.RammingProtection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfRows")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightPerMeter")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("RammingProtections", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.SkirtingBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WeightPerMeter")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SkirtingBoards", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.LiftDataManagerVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VersionsDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionsNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LiftDataManagerVersions", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.LoadTable6", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<int>("Load")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LoadTable6s", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.LoadTable7", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<int>("Load")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LoadTable7s", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.MaterialSurface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BufferPropMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CarMaterialFrontBackWalls")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CarMaterialSideWalls")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CarPanelMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ControlCabinetMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DivisionBarMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LiftDoorMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SkirtingBoardMaterial")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MaterialSurfaces", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParameterCategorys", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DefaultUserEditable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DropdownList")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ParameterCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParameterTypId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParameterTypeCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParameterCategoryId");

                    b.HasIndex("ParameterTypId");

                    b.HasIndex("ParameterTypeCodeId");

                    b.ToTable("ParameterDtos", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterTyp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParameterTyps", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterTypeCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParameterTypeCodes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.PersonsTable8", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Persons")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PersonsTable8s", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("VaultDocument")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RiskAssessments", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.SafetyComponentTyp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SafetyComponentTyps", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.FireClosure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FireClosures", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.FireClosureBy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FireClosureBys", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.MachineRoomPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MachineRoomPositions", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.PitLadder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PitLadders", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.RailBracketFixing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RailBracketFixings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.ShaftFrameFieldFilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ShaftFrameFieldFillings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.ShaftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ShaftTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.SmokeExtractionShaft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SmokeExtractionShafts", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Schacht.WallMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WallMaterials", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.BellPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BellPositions", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.Button", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Buttons", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.ButtonStylusPlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ButtonStylusPlates", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.CarPanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CarPanels", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.CarPanelFitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CarPanelFittings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.ColorDisplay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ColorDisplays", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.ColorLEDButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ColorLEDButtons", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.DirectionIndicators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DirectionIndicatorss", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.Display", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Displays", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.LightFieldSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LightFieldSizes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.OutdoorPanelFastening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OutdoorPanelFastenings", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Signalisation.StylusPlateMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("StylusPlateMaterials", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.CarDoor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarDoorHeaderDepth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CarDoorHeaderHeight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DoorPanelCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoorPanelSpace")
                        .HasColumnType("REAL");

                    b.Property<double>("DoorPanelWidth")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LiftDoorOpeningDirectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<double>("MinimalMountingSpace")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ReducedMinimalMountingSpace")
                        .HasColumnType("REAL");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SillWidth")
                        .HasColumnType("REAL");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LiftDoorOpeningDirectionId");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("CarDoors", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorControls", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarDoorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DoorManufacturer")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShaftDoorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarDoorId");

                    b.HasIndex("ShaftDoorId");

                    b.ToTable("LiftDoorGroups", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorGuard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorGuards", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorLockingDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorLockingDevices", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorOpeningDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorOpeningDirections", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorSill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVandalResistant")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SillFilterTyp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("SillMountTyp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorSills", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorStandards", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LiftDoorTypes", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.ShaftDoor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DefaultFrameDepth")
                        .HasColumnType("REAL");

                    b.Property<double>("DefaultFrameWidth")
                        .HasColumnType("REAL");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DoorPanelCount")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoorPanelSpace")
                        .HasColumnType("REAL");

                    b.Property<double>("DoorPanelWidth")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsObsolete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LiftDoorOpeningDirectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchindlerCertified")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SillWidth")
                        .HasColumnType("REAL");

                    b.Property<int>("TypeExaminationCertificateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LiftDoorOpeningDirectionId");

                    b.HasIndex("TypeExaminationCertificateId");

                    b.ToTable("ShaftDoors", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("SafetyComponentTypId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SafetyComponentTypId");

                    b.ToTable("TypeExaminationCertificates", (string)null);
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.LiftPlanner", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.ZipCode", "ZipCode")
                        .WithMany("LiftPlanners")
                        .HasForeignKey("ZipCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.LiftType", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.CargoType", "CargoType")
                        .WithMany("LiftTypes")
                        .HasForeignKey("CargoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.DriveType", "DriveType")
                        .WithMany("LiftTypes")
                        .HasForeignKey("DriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CargoType");

                    b.Navigation("DriveType");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.ZipCode", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.Country", "Country")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystem", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystemType", "DriveSystemType")
                        .WithMany("DriveSystems")
                        .HasForeignKey("DriveSystemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriveSystemType");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.HydraulicValve", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany()
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.ZiehlAbeggDrive", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany()
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.CarFrameType", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.CarFrameBaseType", "CarFrameBaseType")
                        .WithMany("CarFrameTypes")
                        .HasForeignKey("CarFrameBaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.DriveType", "DriveType")
                        .WithMany("CarFrameTypes")
                        .HasForeignKey("DriveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarFrameBaseType");

                    b.Navigation("DriveType");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideModelType", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideType", "GuideType")
                        .WithMany("GuideModelTypes")
                        .HasForeignKey("GuideTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuideType");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.LiftBuffer", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany()
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.LiftPositionSystem", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany("LiftPositionSystems")
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.OverspeedGovernor", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany("OverspeedGovernors")
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.SafetyGearModelType", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.SafetyGearType", "SafetyGearType")
                        .WithMany("SafetyGearModelTypes")
                        .HasForeignKey("SafetyGearTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany("SafetyGearModelTypes")
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyGearType");

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFloorColorTyp", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFlooring", "CarFlooring")
                        .WithMany("CarFloorColorTyps")
                        .HasForeignKey("CarFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarFlooring");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterDto", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.ParameterCategory", "ParameterCategory")
                        .WithMany("ParameterDtos")
                        .HasForeignKey("ParameterCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.ParameterTyp", "ParameterTyp")
                        .WithMany("ParameterDtos")
                        .HasForeignKey("ParameterTypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.ParameterTypeCode", "ParameterTypeCode")
                        .WithMany("ParameterDtos")
                        .HasForeignKey("ParameterTypeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParameterCategory");

                    b.Navigation("ParameterTyp");

                    b.Navigation("ParameterTypeCode");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.CarDoor", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorOpeningDirection", "LiftDoorOpeningDirection")
                        .WithMany("CarDoors")
                        .HasForeignKey("LiftDoorOpeningDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany("CarDoors")
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiftDoorOpeningDirection");

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorGroup", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Tueren.CarDoor", "CarDoor")
                        .WithMany("LiftDoorGroups")
                        .HasForeignKey("CarDoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Tueren.ShaftDoor", "ShaftDoor")
                        .WithMany("LiftDoorGroups")
                        .HasForeignKey("ShaftDoorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDoor");

                    b.Navigation("ShaftDoor");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.ShaftDoor", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorOpeningDirection", "LiftDoorOpeningDirection")
                        .WithMany("ShaftDoors")
                        .HasForeignKey("LiftDoorOpeningDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", "TypeExaminationCertificate")
                        .WithMany("ShaftDoors")
                        .HasForeignKey("TypeExaminationCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiftDoorOpeningDirection");

                    b.Navigation("TypeExaminationCertificate");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", b =>
                {
                    b.HasOne("LiftDataManager.Core.DataAccessLayer.Models.SafetyComponentTyp", "SafetyComponentTyp")
                        .WithMany("TypeExaminationCertificates")
                        .HasForeignKey("SafetyComponentTypId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyComponentTyp");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.CargoType", b =>
                {
                    b.Navigation("LiftTypes");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.Country", b =>
                {
                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AllgemeineDaten.ZipCode", b =>
                {
                    b.Navigation("LiftPlanners");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.AntriebSteuerungNotruf.DriveSystemType", b =>
                {
                    b.Navigation("DriveSystems");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.DriveType", b =>
                {
                    b.Navigation("CarFrameTypes");

                    b.Navigation("LiftTypes");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.CarFrameBaseType", b =>
                {
                    b.Navigation("CarFrameTypes");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.GuideType", b =>
                {
                    b.Navigation("GuideModelTypes");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Fahrkorb.SafetyGearType", b =>
                {
                    b.Navigation("SafetyGearModelTypes");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Kabine.CarFlooring", b =>
                {
                    b.Navigation("CarFloorColorTyps");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterCategory", b =>
                {
                    b.Navigation("ParameterDtos");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterTyp", b =>
                {
                    b.Navigation("ParameterDtos");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.ParameterTypeCode", b =>
                {
                    b.Navigation("ParameterDtos");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.SafetyComponentTyp", b =>
                {
                    b.Navigation("TypeExaminationCertificates");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.CarDoor", b =>
                {
                    b.Navigation("LiftDoorGroups");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.LiftDoorOpeningDirection", b =>
                {
                    b.Navigation("CarDoors");

                    b.Navigation("ShaftDoors");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.Tueren.ShaftDoor", b =>
                {
                    b.Navigation("LiftDoorGroups");
                });

            modelBuilder.Entity("LiftDataManager.Core.DataAccessLayer.Models.TypeExaminationCertificate", b =>
                {
                    b.Navigation("CarDoors");

                    b.Navigation("LiftPositionSystems");

                    b.Navigation("OverspeedGovernors");

                    b.Navigation("SafetyGearModelTypes");

                    b.Navigation("ShaftDoors");
                });
#pragma warning restore 612, 618
        }
    }
}
